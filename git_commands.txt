To show current working directory:-
	$ pwd

To show git version:-
	$ git --version

To clear the screen-:
	$ clear

To initialize a folder as repository-
	$ git init

To show status of repository-
	$ git status

To add specific file in repository-
	$ git add a.txt b.txt

To add all file in repository-
	$ git add .*

To add email when first time install git-
	$ git config --global user.email "goraisumit01@gmail.com"

To add username -
	$ git config --global  user.name "Sumit"

To commit in the repository-
	$ git commit -m "first commit"

To show how many commits happened or commit history in detailed-
	$ git log

If the files are modified then to commit run the command-
	$ git commit -a -m "both files are modified"

To see all the file -
	$ git ls
================================================
To create file by vim editor -
$ vim index.txt

then vim editor open ,here type the text and press ( ctrl+c ) then type (  :wq  )  and press enter 

ctrl+c is for send the cursor to the last line
:wq is used to saved the file and then exit from the vim editor.
================================================

To add the file in staging area-
$ git add .

----------------------------------------------------------------------------------------------------------------------------------------------
                                                             Git diff command 
                                               ===========================
Requirement 1 : To see the difference in file content between the working directory  and staging area

$ git diff index.txt


Requirement 2 : To see the File Content between working directory and last  commit

$ git diff HEAD index.txt


Requirement 3 :- To see the difference in File content between Staging Copy and Last Commit

$ git diff --staged HEAD index.txt


Requirement 4 :- To see the difference in File Content between specific Commit and Working Directory Copy

To see the commit id only -
$ git log –oneline

To see all the commits with details-
$ git log

$ git diff 1821ad2 index.txt   
means (git diff ‘commit id ‘ index.txt)


Requirement 5 :- To see the difference in File content between specific commit and staging area copy

$ git diff --staged 1821ad2


Requirement 6 :- To see the difference in File content between 2 specific commits

$ git diff 3f5f1a8 286be1f index.txt
where 3f5f1a8  is the commit id


Requirement 7 :- To see the difference in Content between two branches

master branch
main branch

$ git diff master main    --> It show all the difference between master branch nad main branch


Requirement 8 :- To see the difference in contents between Local and Remote Repositories

$ git diff master origin/master

-------------------------------------------------------------------------------------------------------------------------------------

To see name of all file in the working directory-
	$ git ls

To see files in staging area-
	$ git ls-files

------------------------------------------------------------------------------------------------------------------

                                 git rm command
                             ================
Requirement 1 :- Remove files both from staging & working directory

To remove specific file give file name-
	$ git rm file1.txt

To remove all file-
	$ remove rm -r .

Requirement 2 :- Remove files only from staging area

$ git rm --cached file2.txt

Requirement 3 :- Remove files only from working directory

$ rm file3.txt
-------------------------------------------------------------------------------------------------------------------

                             git checkout command
                          =====================
To see the content of the file:-
	$cat file5.txt

To use checkout command:-
	$ git checkout --file5.txt

--------------------------------------------------------------------------------------------------------------------
	      git reset command
	===================
To remove changes from staging area :-
	$ git reset file.txt

To reset with --mixed mode:-
	$ git reset --mixed 488ceb9 		(where 488ceb9 is commit id of the previouse commit)

To reset with --soft mode:-
	$ git reset --soft 488ceb9

To reset with --hard mode:-
	$ git reset --hard 488ceb9

----------------------------------------------------------------------------------------------------------------------------
	git branching command
             ======================
To create new file :-
	$touch a.txt

To view the available branches :-
	$ git branch
	$ git status

To create new branch:-
	$ git branch "branch_name"

To Switch from one branch to another branch:-
	$ git checkout "branch_name "

Creating and switching to branch in single command
	$ git checkout -b ‘branchname’

To merge two branches:-
	$ git merge branch_name
